*dumper.txt*	Dump the vim variables.

Version: 0.1
Author : thinca <http://d.hatena.ne.jp/thinca/>
License: Creative Commons Attribution 2.1 Japan License
         <http://creativecommons.org/licenses/by/2.1/jp/deed.en>

==============================================================================
CONTENTS					*dumper-contents*

Introduction		|dumper-introduction|
Interface		|dumper-interface|
  Commands		  |dumper-commands|
  Functions		  |dumper-functions|
  Options		  |dumper-options|
Format Rules		|dumper-format-rules|
Limitation		|dumper-limitation|
Changelog		|dumper-changelog|


==============================================================================
INTRODUCTION					*dumper-introduction*

*dumper* is a Vim plugin to dump the vim variable for debug.


==============================================================================
INTERFACE					*dumper-interface*

------------------------------------------------------------------------------
COMMANDS					*dumper-commands*

:Dump {expr} [, ...]				*:Dump*
			The command version of |Dump()|.  When two or more
			values are passed, it is necessary to delimit each
			value by the comma.

------------------------------------------------------------------------------
FUNCTIONS					*dumper-functions*

Dump({expr} [, ...])				*Dump()*
			Return {expr} converted to a formatted String.  When
			two or more values are passed, it is delimited by
			"\n".

------------------------------------------------------------------------------
OPTIONS						*dumper-options*

g:dumper_indent					*g:dumper_indent*
	Width of indent.  If this value is not defined, 'shiftwidth' is used.

g:dumper_width
	Width by return.  If this value is not defined, 'columns' is used.


==============================================================================
FORMAT RULES					*dumper-format-rules*

String
	|strtrans()| and |string()| are sequentially used.

Number
Float
	|string()| is used.

List
	List is displayed by same style as |string()|.  If the limit of
	width is exceeded, it is displayed by the following styles.
>
	[
	  element1,
	  element2,
	  element3
	]
<
	If nested element is appear, it is displayed by the following styles.
>
	[nested element {number}]
<
	The {number} is count from top level.
>
	let x = [10]
	let x += [x]
	Dump x  " => [10, [nested element 0]]
<
Dictionary
	List is displayed by same style as |string()|.  If the limit of
	width is exceeded, it is displayed by the following styles.
>
	{
	  'key1': value1,
	  'key2': value2,
	  'key3': value3
	}
<
	The keys are sorted by |sort()|.
	If nested element is appear, it is displayed by same style as List,
	but it use brace instead of bracket.

Funcref
	Normally, |string()| is used.  If 'verbose' is one, the definition of
	function is displayed by using |:function|.  If 'verbose' is two or
	more, in addition, the file which the function was defined at last is
	displayed by |:function-verbose|.


==============================================================================
LIMITATION					*dumper-limitation*

- String and key of Dictionary are displayed by |strtrans()|.

- In internal, the recursive call is used.  This is subject to the limitation
  of it. See 'maxfuncdepth'.


==============================================================================
CHANGELOG					*dumper-changelog*

0.1	2009-06-24
	- Initial version.


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
